// <auto-generated />
using System;
using CustomerVehicleManagement.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerVehicleManagement.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221010130617_InventoryItemConfiguration")]
    partial class InventoryItemConfiguration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.CreditCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<int>("FeeType")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAddedToDeposit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CreditCard", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("CustomerType")
                        .HasColumnType("int");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("Customer", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Email", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("Email", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("InspectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<long?>("LaborId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ManufacturerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PackageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PartId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductCodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TireId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WarrantyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.HasIndex("LaborId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PackageId");

                    b.HasIndex("PartId");

                    b.HasIndex("ProductCodeId");

                    b.HasIndex("TireId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("InventoryItem", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemInspection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("InspectionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InventoryItemInspection", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemLabor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("InventoryItemLabor", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("BaseLaborAmount")
                        .HasColumnType("float");

                    b.Property<double>("BasePartsAmount")
                        .HasColumnType("float");

                    b.Property<bool>("IsDiscountable")
                        .HasColumnType("bit");

                    b.Property<string>("Script")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InventoryItemPackage", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPackageItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<long>("InventoryItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InventoryItemPackageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("InventoryItemPackageId");

                    b.ToTable("InventoryItemPackageItem", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPackagePlaceholder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<long?>("InventoryItemPackageId")
                        .HasColumnType("bigint");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemPackageId");

                    b.ToTable("InventoryItemPackagePlaceholder", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Core")
                        .HasColumnType("float");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<bool>("Fractional")
                        .HasColumnType("bit");

                    b.Property<string>("LineCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("List")
                        .HasColumnType("float");

                    b.Property<double>("Retail")
                        .HasColumnType("float");

                    b.Property<string>("SubLineCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("InventoryItemPart", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemTire", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AspectRatio")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionType")
                        .HasColumnType("int");

                    b.Property<double>("Core")
                        .HasColumnType("float");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<double>("Diameter")
                        .HasColumnType("float");

                    b.Property<bool>("Fractional")
                        .HasColumnType("bit");

                    b.Property<string>("LineCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("List")
                        .HasColumnType("float");

                    b.Property<int>("LoadIndex")
                        .HasColumnType("int");

                    b.Property<double>("Retail")
                        .HasColumnType("float");

                    b.Property<string>("SpeedRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubLineCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InventoryItemTire", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemWarranty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("InventoryItemWarranty", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.MaintenanceItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<long?>("InventoryItemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("MaintenanceItem", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.Manufacturer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.ProductCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ManufacturerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SaleCodeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SaleCodeId");

                    b.ToTable("ProductCode", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Organization", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.Vendor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Vendor", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<long?>("VendorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorInvoice", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoiceLineItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Core")
                        .HasColumnType("float");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("PONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("VendorInvoiceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VendorInvoiceId");

                    b.ToTable("VendorInvoiceLineItem", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoicePayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VendorInvoiceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("VendorInvoiceId");

                    b.ToTable("VendorInvoicePayment", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoicePaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnAccountPaymentType")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("ReconcilingVendorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReconcilingVendorId");

                    b.ToTable("VendorInvoicePaymentMethod", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoiceTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<long?>("SalesTaxId")
                        .HasColumnType("bigint");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.Property<long?>("VendorInvoiceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SalesTaxId");

                    b.HasIndex("VendorInvoiceId");

                    b.ToTable("VendorInvoiceTax", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Person", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Phone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<int>("PhoneType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("Phone", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateInvoiced")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountTotal")
                        .HasColumnType("float");

                    b.Property<double>("HazMatTotal")
                        .HasColumnType("float");

                    b.Property<long>("InvoiceNumber")
                        .HasColumnType("bigint");

                    b.Property<double>("LaborTotal")
                        .HasColumnType("float");

                    b.Property<double>("PartsTotal")
                        .HasColumnType("float");

                    b.Property<long>("RepairOrderNumber")
                        .HasColumnType("bigint");

                    b.Property<double>("ShopSuppliesTotal")
                        .HasColumnType("float");

                    b.Property<double>("TaxTotal")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("Vehicle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RepairOrder", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Core")
                        .HasColumnType("float");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountEach")
                        .HasColumnType("float");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<bool>("IsCounterSale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeclined")
                        .HasColumnType("bit");

                    b.Property<double>("LaborEach")
                        .HasColumnType("float");

                    b.Property<int>("LaborType")
                        .HasColumnType("int");

                    b.Property<long>("ManufacturerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("ProductCodeId")
                        .HasColumnType("bigint");

                    b.Property<double>("QuantitySold")
                        .HasColumnType("float");

                    b.Property<long>("RepairOrderServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("SaleCodeId")
                        .HasColumnType("bigint");

                    b.Property<int>("SaleType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductCodeId");

                    b.HasIndex("RepairOrderServiceId");

                    b.HasIndex("SaleCodeId");

                    b.ToTable("RepairOrderItem", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderItemTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("LaborTax")
                        .HasColumnType("float");

                    b.Property<double>("LaborTaxRate")
                        .HasColumnType("float");

                    b.Property<double>("PartTax")
                        .HasColumnType("float");

                    b.Property<double>("PartTaxRate")
                        .HasColumnType("float");

                    b.Property<long>("RepairOrderItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RepairOrderItemId");

                    b.ToTable("RepairOrderItemTax", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("PaymentMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("RepairOrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RepairOrderId");

                    b.ToTable("RepairOrderPayment", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderPurchase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("PONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RepairOrderItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("VendorId")
                        .HasColumnType("bigint");

                    b.Property<string>("VendorInvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorPartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RepairOrderItemId");

                    b.ToTable("RepairOrderPurchase", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderSerialNumber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("RepairOrderItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RepairOrderItemId");

                    b.ToTable("RepairOrderSerialNumber", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("DiscountTotal")
                        .HasColumnType("float");

                    b.Property<bool>("IsCounterSale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeclined")
                        .HasColumnType("bit");

                    b.Property<double>("LaborTotal")
                        .HasColumnType("float");

                    b.Property<double>("PartsTotal")
                        .HasColumnType("float");

                    b.Property<long>("RepairOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("SaleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShopSuppliesTotal")
                        .HasColumnType("float");

                    b.Property<double>("TaxTotal")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RepairOrderId");

                    b.ToTable("RepairOrderService", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderServiceTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("LaborTax")
                        .HasColumnType("float");

                    b.Property<double>("LaborTaxRate")
                        .HasColumnType("float");

                    b.Property<double>("PartTax")
                        .HasColumnType("float");

                    b.Property<double>("PartTaxRate")
                        .HasColumnType("float");

                    b.Property<long>("RepairOrderServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RepairOrderServiceId");

                    b.ToTable("RepairOrderServiceTax", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("LaborTax")
                        .HasColumnType("float");

                    b.Property<double>("LaborTaxRate")
                        .HasColumnType("float");

                    b.Property<double>("PartTax")
                        .HasColumnType("float");

                    b.Property<double>("PartTaxRate")
                        .HasColumnType("float");

                    b.Property<long>("RepairOrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RepairOrderId");

                    b.ToTable("RepairOrderTax", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderTech", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("RepairOrderServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("TechnicianId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RepairOrderServiceId");

                    b.ToTable("RepairOrderTech", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderWarranty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("NewWarranty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OriginalInvoiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalWarranty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<long>("RepairOrderItemId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("RepairOrderItemId");

                    b.ToTable("RepairOrderWarranty", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.SaleCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DesiredMargin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("LaborRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopSuppliesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShopSuppliesId");

                    b.ToTable("SaleCode", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.SaleCodeShopSupplies", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IncludeLabor")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeParts")
                        .HasColumnType("bit");

                    b.Property<double>("MaximumCharge")
                        .HasColumnType("float");

                    b.Property<double>("MinimumCharge")
                        .HasColumnType("float");

                    b.Property<double>("MinimumJobAmount")
                        .HasColumnType("float");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("SaleCodeShopSupplies");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Taxes.ExciseFee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long?>("SalesTaxId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SalesTaxId");

                    b.ToTable("ExciseFee", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Taxes.SalesTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAppliedByDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsTaxable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("LaborTaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("PartTaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("TaxIdNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TaxType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("SalesTax", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Vehicle", "dbo");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Customer", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.OwnsOne("Menominee.Common.ValueObjects.ContactPreferences", "ContactPreferences", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .HasColumnType("bigint");

                            b1.Property<bool>("AllowEmail")
                                .HasColumnType("bit")
                                .HasColumnName("AllowEmail");

                            b1.Property<bool>("AllowMail")
                                .HasColumnType("bit")
                                .HasColumnName("AllowMail");

                            b1.Property<bool>("AllowSms")
                                .HasColumnType("bit")
                                .HasColumnName("AllowSms");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("ContactPreferences");

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Email", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Organization", null)
                        .WithMany("Emails")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Person", null)
                        .WithMany("Emails")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItem", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemInspection", "Inspection")
                        .WithMany()
                        .HasForeignKey("InspectionId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPackage", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPart", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.ProductCode", "ProductCode")
                        .WithMany()
                        .HasForeignKey("ProductCodeId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemTire", "Tire")
                        .WithMany()
                        .HasForeignKey("TireId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemWarranty", "Warranty")
                        .WithMany()
                        .HasForeignKey("WarrantyId");

                    b.Navigation("Inspection");

                    b.Navigation("Labor");

                    b.Navigation("Manufacturer");

                    b.Navigation("Package");

                    b.Navigation("Part");

                    b.Navigation("ProductCode");

                    b.Navigation("Tire");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemInspection", b =>
                {
                    b.OwnsOne("CustomerVehicleManagement.Domain.Entities.Inventory.LaborAmount", "LaborAmount", b1 =>
                        {
                            b1.Property<long>("InventoryItemInspectionId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Amount")
                                .HasColumnType("float")
                                .HasColumnName("LaborPayAmount");

                            b1.Property<int>("PayType")
                                .HasColumnType("int")
                                .HasColumnName("LaborPayType");

                            b1.HasKey("InventoryItemInspectionId");

                            b1.ToTable("InventoryItemInspection", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemInspectionId");
                        });

                    b.OwnsOne("CustomerVehicleManagement.Domain.Entities.Inventory.TechAmount", "TechAmount", b1 =>
                        {
                            b1.Property<long>("InventoryItemInspectionId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Amount")
                                .HasColumnType("float");

                            b1.Property<int>("PayType")
                                .HasColumnType("int")
                                .HasColumnName("TechPayType");

                            b1.Property<int>("SkillLevel")
                                .HasColumnType("int")
                                .HasColumnName("TechSkillLevel");

                            b1.HasKey("InventoryItemInspectionId");

                            b1.ToTable("InventoryItemInspection", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemInspectionId");
                        });

                    b.Navigation("LaborAmount");

                    b.Navigation("TechAmount");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemLabor", b =>
                {
                    b.OwnsOne("CustomerVehicleManagement.Domain.Entities.Inventory.LaborAmount", "LaborAmount", b1 =>
                        {
                            b1.Property<long>("InventoryItemLaborId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Amount")
                                .HasColumnType("float")
                                .HasColumnName("LaborPayAmount");

                            b1.Property<int>("PayType")
                                .HasColumnType("int")
                                .HasColumnName("LaborPayType");

                            b1.HasKey("InventoryItemLaborId");

                            b1.ToTable("InventoryItemLabor", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemLaborId");
                        });

                    b.OwnsOne("CustomerVehicleManagement.Domain.Entities.Inventory.TechAmount", "TechAmount", b1 =>
                        {
                            b1.Property<long>("InventoryItemLaborId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Amount")
                                .HasColumnType("float");

                            b1.Property<int>("PayType")
                                .HasColumnType("int")
                                .HasColumnName("TechPayType");

                            b1.Property<int>("SkillLevel")
                                .HasColumnType("int")
                                .HasColumnName("TechSkillLevel");

                            b1.HasKey("InventoryItemLaborId");

                            b1.ToTable("InventoryItemLabor", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemLaborId");
                        });

                    b.Navigation("LaborAmount");

                    b.Navigation("TechAmount");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPackageItem", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItem", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPackage", null)
                        .WithMany("Items")
                        .HasForeignKey("InventoryItemPackageId");

                    b.OwnsOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPackageDetails", "Details", b1 =>
                        {
                            b1.Property<long>("InventoryItemPackageItemId")
                                .HasColumnType("bigint");

                            b1.Property<bool>("ExciseFeeIsAdditional")
                                .HasColumnType("bit")
                                .HasColumnName("ExciseFeeIsAdditional");

                            b1.Property<bool>("LaborAmountIsAdditional")
                                .HasColumnType("bit")
                                .HasColumnName("LaborAmountIsAdditional");

                            b1.Property<bool>("PartAmountIsAdditional")
                                .HasColumnType("bit")
                                .HasColumnName("PartAmountIsAdditional");

                            b1.Property<double>("Quantity")
                                .HasColumnType("float")
                                .HasColumnName("Quantity");

                            b1.HasKey("InventoryItemPackageItemId");

                            b1.ToTable("InventoryItemPackageItem", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemPackageItemId");
                        });

                    b.Navigation("Details");

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPackagePlaceholder", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPackage", null)
                        .WithMany("Placeholders")
                        .HasForeignKey("InventoryItemPackageId");

                    b.OwnsOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPackageDetails", "Details", b1 =>
                        {
                            b1.Property<long>("InventoryItemPackagePlaceholderId")
                                .HasColumnType("bigint");

                            b1.Property<bool>("ExciseFeeIsAdditional")
                                .HasColumnType("bit")
                                .HasColumnName("ExciseFeeIsAdditional");

                            b1.Property<bool>("LaborAmountIsAdditional")
                                .HasColumnType("bit")
                                .HasColumnName("LaborAmountIsAdditional");

                            b1.Property<bool>("PartAmountIsAdditional")
                                .HasColumnType("bit")
                                .HasColumnName("PartAmountIsAdditional");

                            b1.Property<double>("Quantity")
                                .HasColumnType("float")
                                .HasColumnName("Quantity");

                            b1.HasKey("InventoryItemPackagePlaceholderId");

                            b1.ToTable("InventoryItemPackagePlaceholder", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemPackagePlaceholderId");
                        });

                    b.Navigation("Details");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPart", b =>
                {
                    b.OwnsOne("CustomerVehicleManagement.Domain.Entities.Inventory.TechAmount", "TechAmount", b1 =>
                        {
                            b1.Property<long>("InventoryItemPartId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Amount")
                                .HasColumnType("float")
                                .HasColumnName("TechPayAmount");

                            b1.Property<int>("PayType")
                                .HasColumnType("int")
                                .HasColumnName("TechPayType");

                            b1.Property<int>("SkillLevel")
                                .HasColumnType("int")
                                .HasColumnName("TechSkillLevel");

                            b1.HasKey("InventoryItemPartId");

                            b1.ToTable("InventoryItemPart", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemPartId");
                        });

                    b.Navigation("TechAmount");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemTire", b =>
                {
                    b.OwnsOne("CustomerVehicleManagement.Domain.Entities.Inventory.TechAmount", "TechAmount", b1 =>
                        {
                            b1.Property<long>("InventoryItemTireId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Amount")
                                .HasColumnType("float")
                                .HasColumnName("TechPayAmount");

                            b1.Property<int>("PayType")
                                .HasColumnType("int")
                                .HasColumnName("TechPayType");

                            b1.Property<int>("SkillLevel")
                                .HasColumnType("int")
                                .HasColumnName("TechSkillLevel");

                            b1.HasKey("InventoryItemTireId");

                            b1.ToTable("InventoryItemTire", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemTireId");
                        });

                    b.Navigation("TechAmount");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemWarranty", b =>
                {
                    b.OwnsOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemWarrantyPeriod", "WarrantyPeriod", b1 =>
                        {
                            b1.Property<long>("InventoryItemWarrantyId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Duration")
                                .HasColumnType("int")
                                .HasColumnName("Duration");

                            b1.Property<int>("PeriodType")
                                .HasColumnType("int")
                                .HasColumnName("PeriodType");

                            b1.HasKey("InventoryItemWarrantyId");

                            b1.ToTable("InventoryItemWarranty", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemWarrantyId");
                        });

                    b.Navigation("WarrantyPeriod");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.MaintenanceItem", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItem", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemId");

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.ProductCode", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.SaleCode", "SaleCode")
                        .WithMany()
                        .HasForeignKey("SaleCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("SaleCode");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Organization", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Person", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.OwnsOne("Menominee.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("OrganizationId")
                                .HasColumnType("bigint");

                            b1.Property<string>("AddressLine")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("AddressLine");

                            b1.Property<string>("City")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("AddressCity");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("AddressPostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("AddressState");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organization", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.OwnsOne("Menominee.Common.ValueObjects.OrganizationName", "Name", b1 =>
                        {
                            b1.Property<long>("OrganizationId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Name");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organization", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoice", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Payables.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoiceLineItem", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoice", null)
                        .WithMany("LineItems")
                        .HasForeignKey("VendorInvoiceId");

                    b.OwnsOne("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoiceItem", "Item", b1 =>
                        {
                            b1.Property<long>("VendorInvoiceLineItemId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("ItemDescription");

                            b1.Property<long?>("ManufacturerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("PartNumber")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("ItemPartNumber");

                            b1.Property<long?>("SaleCodeId")
                                .HasColumnType("bigint");

                            b1.HasKey("VendorInvoiceLineItemId");

                            b1.HasIndex("ManufacturerId");

                            b1.HasIndex("SaleCodeId");

                            b1.ToTable("VendorInvoiceLineItem", "dbo");

                            b1.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.Manufacturer", "Manufacturer")
                                .WithMany()
                                .HasForeignKey("ManufacturerId");

                            b1.HasOne("CustomerVehicleManagement.Domain.Entities.SaleCode", "SaleCode")
                                .WithMany()
                                .HasForeignKey("SaleCodeId");

                            b1.WithOwner()
                                .HasForeignKey("VendorInvoiceLineItemId");

                            b1.Navigation("Manufacturer");

                            b1.Navigation("SaleCode");
                        });

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoicePayment", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoicePaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoice", null)
                        .WithMany("Payments")
                        .HasForeignKey("VendorInvoiceId");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoicePaymentMethod", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Payables.Vendor", "ReconcilingVendor")
                        .WithMany()
                        .HasForeignKey("ReconcilingVendorId");

                    b.Navigation("ReconcilingVendor");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoiceTax", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Taxes.SalesTax", "SalesTax")
                        .WithMany()
                        .HasForeignKey("SalesTaxId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoice", null)
                        .WithMany("Taxes")
                        .HasForeignKey("VendorInvoiceId");

                    b.Navigation("SalesTax");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Person", b =>
                {
                    b.OwnsOne("Menominee.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("PersonId")
                                .HasColumnType("bigint");

                            b1.Property<string>("AddressLine")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("AddressLine");

                            b1.Property<string>("City")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("AddressCity");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("AddressPostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("AddressState");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("Menominee.Common.ValueObjects.DriversLicense", "DriversLicense", b1 =>
                        {
                            b1.Property<long>("PersonId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Number")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("DriversLicenseNumber");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("DriversLicenseState");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");

                            b1.OwnsOne("Menominee.Common.ValueObjects.DateTimeRange", "ValidDateRange", b2 =>
                                {
                                    b2.Property<long>("DriversLicensePersonId")
                                        .HasColumnType("bigint");

                                    b2.Property<DateTime>("End")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("DriversLicenseExpiry");

                                    b2.Property<DateTime>("Start")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("DriversLicenseIssued");

                                    b2.HasKey("DriversLicensePersonId");

                                    b2.ToTable("Person", "dbo");

                                    b2.WithOwner()
                                        .HasForeignKey("DriversLicensePersonId");
                                });

                            b1.Navigation("ValidDateRange");
                        });

                    b.OwnsOne("Menominee.Common.ValueObjects.PersonName", "Name", b1 =>
                        {
                            b1.Property<long>("PersonId")
                                .HasColumnType("bigint");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("MiddleName");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Address");

                    b.Navigation("DriversLicense");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Phone", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Organization", null)
                        .WithMany("Phones")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Person", null)
                        .WithMany("Phones")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderItem", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Inventory.ProductCode", "ProductCode")
                        .WithMany()
                        .HasForeignKey("ProductCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderService", null)
                        .WithMany("Items")
                        .HasForeignKey("RepairOrderServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerVehicleManagement.Domain.Entities.SaleCode", "SaleCode")
                        .WithMany()
                        .HasForeignKey("SaleCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("ProductCode");

                    b.Navigation("SaleCode");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderItemTax", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderItem", null)
                        .WithMany("Taxes")
                        .HasForeignKey("RepairOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderPayment", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrder", null)
                        .WithMany("Payments")
                        .HasForeignKey("RepairOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderPurchase", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderItem", null)
                        .WithMany("Purchases")
                        .HasForeignKey("RepairOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderSerialNumber", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderItem", null)
                        .WithMany("SerialNumbers")
                        .HasForeignKey("RepairOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderService", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrder", null)
                        .WithMany("Services")
                        .HasForeignKey("RepairOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderServiceTax", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderService", null)
                        .WithMany("Taxes")
                        .HasForeignKey("RepairOrderServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderTax", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrder", null)
                        .WithMany("Taxes")
                        .HasForeignKey("RepairOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderTech", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderService", null)
                        .WithMany("Techs")
                        .HasForeignKey("RepairOrderServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderWarranty", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderItem", null)
                        .WithMany("Warranties")
                        .HasForeignKey("RepairOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.SaleCode", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.SaleCodeShopSupplies", "ShopSupplies")
                        .WithMany()
                        .HasForeignKey("ShopSuppliesId");

                    b.Navigation("ShopSupplies");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Taxes.ExciseFee", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Taxes.SalesTax", null)
                        .WithMany("ExciseFees")
                        .HasForeignKey("SalesTaxId");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("CustomerVehicleManagement.Domain.Entities.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Inventory.InventoryItemPackage", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Placeholders");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Organization", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Payables.VendorInvoice", b =>
                {
                    b.Navigation("LineItems");

                    b.Navigation("Payments");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Person", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrder", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Services");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderItem", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("SerialNumbers");

                    b.Navigation("Taxes");

                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.RepairOrders.RepairOrderService", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Taxes");

                    b.Navigation("Techs");
                });

            modelBuilder.Entity("CustomerVehicleManagement.Domain.Entities.Taxes.SalesTax", b =>
                {
                    b.Navigation("ExciseFees");
                });
#pragma warning restore 612, 618
        }
    }
}
