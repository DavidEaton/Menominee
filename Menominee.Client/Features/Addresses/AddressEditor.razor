<form id="addressEditor">
    <div class="row">
        <label for="address" class="k-label">Street 1</label>
        <TelerikTextBox @bind-Value="@Address.AddressLine1"
                        Id="address"
                        Width="100%"
                        AutoComplete="off"
                        Placeholder="Enter Street 1"
                        OnBlur="@AddressChanged" />
        <TelerikValidationMessage For="@(() => Address.AddressLine1)" />
    </div>

    <div class="row">
        <label for="addressLine2" class="k-label">Street 2</label>
        <TelerikTextBox @bind-Value="@Address.AddressLine2"
                        Id="addressLine2"
                        Width="100%"
                        AutoComplete="off"
                        Placeholder="Enter Street 2"
                        OnBlur="@AddressChanged" />
        <TelerikValidationMessage For="@(() => Address.AddressLine2)" />
    </div>

    <div class="row">
        <div class="col-12 col-md-9 col-lg-6 p-0">
            <label for="postalCode" class="k-label">ZIP/Postal Code</label>
            <TelerikTextBox @bind-Value="@Address.PostalCode"
                            Id="postalCode"
                            AutoComplete="off"
                            Placeholder="Enter Zip/Postal Code"
                            OnBlur="@AddressChanged" />
            <TelerikValidationMessage For="@(() => Address.PostalCode)" />
        </div>
    </div>

    <div class="row">
        <label for="city" class="k-label">City</label>
        <TelerikTextBox @bind-Value="@Address.City"
                        Id="city"
                        Width="100%"
                        AutoComplete="off"
                        Placeholder="Enter City"
                        OnBlur="@AddressChanged" />
        <TelerikValidationMessage For="@(() => Address.City)" />
    </div>

    <div class="row">
        <div class="col-12 col-md-9 col-lg-6 p-0">
            <label for="stateProv">State/Province</label>
            <TelerikDropDownList @bind-Value="@Address.State"
                                 Data="@StateProvinceEnumData"
                                 TextField="DisplayText"
                                 ValueField="Value"
                                 Id="stateProv"
                                 OnBlur="@AddressChanged">
                <ItemTemplate>
                    @context.FullDisplayText
                </ItemTemplate>
                <DropDownListSettings>
                    <DropDownListPopupSettings Width="20rem" />
                </DropDownListSettings>
            </TelerikDropDownList>
            <TelerikValidationMessage For="@(() => Address.State)" />
        </div>
    </div>
</form>


<EditNewDeleteIconButtons OnDelete="@RemoveAddress"
                          CanDelete="@HasAddress()"
                          CanCancel="@(Address.IsNotEmpty && HasChanges())"
                          OnCancel="@ResetAddress" />

<style>
    .row {
        margin: 0 0 .5rem 0;
    }

    #addressEditor .row:last-of-type {
        margin: 0;
    }

</style>

@code {
    [Parameter] public AddressToWrite? Address { get; set; }

    [Parameter] public EventCallback OnChange { get; set; }

    [Parameter] public EventCallback OnDelete { get; set; }

    [CascadingParameter] public DialogFactory? Dialogs { get; set; }

    public FormMode FormMode { get; set; } = FormMode.View;

    private AddressToWrite addressOriginal;

    private bool HasAddress() => Address is not null && (Address.IsNotEmpty);
    private bool HasChanges() => Address is not null && (Address.AddressLine1 != addressOriginal?.AddressLine1 ||
                                                        Address.City != addressOriginal?.City ||
                                                        Address.State != addressOriginal?.State ||
                                                        Address.PostalCode != addressOriginal?.PostalCode ||
                                                        Address.AddressLine2 != addressOriginal?.AddressLine2);

    public void AddressChanged()
    {
        OnChange.InvokeAsync();
    }

    private void AddAddress()
    {
        Address ??= new AddressToWrite();
        FormMode = FormMode.Add;
    }

    public void EditAddress()
    {
        FormMode = FormMode.Edit;
    }

    private async Task RemoveAddress()
    {
        var confirm = await Dialogs?.ConfirmAsync($"Are you sure you want to remove this Address?", "Remove Address");

        if (confirm)
        {
            await OnDelete.InvokeAsync();
        }
    }
    protected override void OnInitialized()
    {
        foreach (State item in Enum.GetValues(typeof(State)))
        {
            StateProvinceEnumData.Add(new StateProvinceEnumModel
                {
                    DisplayText = item.ToString(),
                    FullDisplayText = item.ToString() + " - " + EnumExtensions.GetDisplayName(item),
                    Value = item
                });
        }
        StateProvinceEnumData = StateProvinceEnumData.OrderBy(state => state.DisplayText).ToList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            addressOriginal = new AddressToWrite
                {
                    AddressLine1 = Address.AddressLine1,
                    City = Address.City,
                    State = Address.State,
                    PostalCode = Address.PostalCode,
                    AddressLine2 = Address.AddressLine2,
                };
        }
    }

    public void ResetAddress()
    {
        Address.AddressLine1 = addressOriginal.AddressLine1;
        Address.City = addressOriginal.City;
        Address.State = addressOriginal.State;
        Address.PostalCode = addressOriginal.PostalCode;
        Address.AddressLine2 = addressOriginal.AddressLine2;
    }

    List<StateProvinceEnumModel> StateProvinceEnumData { get; set; } = new List<StateProvinceEnumModel>();
}