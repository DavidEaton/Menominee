@page "/"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Telerik.Blazor.Components

@inject IAccessTokenProvider TokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<div>
    <p>Index page of <strong>Menominee</strong></p>
</div>

<h3>ClaimsPrincipal Data</h3>

<TelerikButton OnClick="GetClaimsPrincipalData"
               Primary="true">
    Get ClaimsPrincipal Data
</TelerikButton>
<div class="top-row pl-4 navbar navbar-dark">
    <TelerikButton OnClick="WriteTokenAsync">
        Write Token
    </TelerikButton>
</div>
<p>@_authMessage</p>

@if (_claims.Count() > 0)
{
    <ul>
        @foreach (var claim in _claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}

<p>@_surnameMessage</p>
@code {
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage =
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }


    }

    private async Task WriteTokenAsync()
    {
        string accessToken;

        var tokenResult = await TokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
            Console.WriteLine(accessToken);

            foreach (var item in token.GrantedScopes)
            {
                Console.WriteLine(item.ToString());
            }
        }
    }
}