@page "/organizationsIndexSansTelerik"

<div class="container">
    <div class="h5">Organizations</div>

    @if (OrganizationsList == null)
    {
        @if (!EditingOrganization && !AddingOrganization)
        {
            <p><em>Loading...</em></p>
        }
    }

    @if (!EditingOrganization && !AddingOrganization && OrganizationsList != null)
    {
        <div class="pb-3">
            <TelerikButton OnClick="Add"
                           Primary="true"
                           Icon="plus"
                           title="Add New Organization">
                Add Organization
            </TelerikButton>
        </div>
        <OrganizationsGrid Organizations="OrganizationsList"
                           OnSelected="HandleSelectedOrganizationAsync" />
    }


    @if ((AddingOrganization || EditingOrganization) && organization != null)
    {
        <EditForm Model="@organization"
                  OnValidSubmit="SubmitForm">
            <OrganizationEditor TItem="OrganizationToWrite"
                                Item="@organization"
                                NameProperty="Name"
                                NoteProperty="Note" />
            <FluentValidationValidator />
                    <div>
                        @if (organization?.Address != null)
                        {
                            <div class="h6"
                                 tabindex="-1"
                                 @onclick="() => EnableEditor = true">
                                Address
                                &nbsp &nbsp
                                <TelerikIcon Icon="pencil" />
                            </div>
                            <AddressEditor Address="organization?.Address"
                                           Cancel="CancelAddress"
                                           Ok="SaveAddress"
                                           Enabled="EnableEditor" />
                        }

                        @if (organization?.Address == null)
                        {
                            <div class="h6"
                                 tabindex="-1">
                                Address
                                &nbsp &nbsp
                            </div>
                            <TelerikButton OnClick="AddAddress"
                                           Icon="plus"
                                           Class="button-border-success"
                                           title="Add New Address">
                                Add Address
                            </TelerikButton>
                        }
                    </div>
                    @*<div>
                        <PhonesEditor Phones="@organization?.Phones" />
                    </div>
                    <div>
                        <EmailsEditor Emails="@organization?.Emails" />
                    </div>*@
            <div class="pt-4">
                <EditFormButtons Close="CloseEditorAsync" />
            </div>
        </EditForm>
    }
</div>

@code {
    [Inject]
    public IOrganizationDataService OrganizationDataService { get; set; }
    public IReadOnlyList<OrganizationToReadInList> OrganizationsList;
    public long Id { get; set; }
    private bool EditingOrganization { get; set; } = false;
    private bool AddingOrganization { get; set; } = false;
    private bool EnableEditor { get; set; } = false;
    private OrganizationToWrite organization { get; set; }

    protected override async Task OnInitializedAsync()
    {
        OrganizationsList = (await OrganizationDataService.GetAllOrganizations()).ToList();
    }

    //Edit
    private async Task HandleSelectedOrganizationAsync(GridRowClickEventArgs args)
    {
        Id = (args.Item as OrganizationToReadInList).Id;
        EditingOrganization = true;
        OrganizationsList = null;

        var readDto = await OrganizationDataService.GetOrganization(Id);
        organization = new OrganizationToWrite
        {
            Name = readDto.Name,
            Note = readDto.Note
        };

        if (readDto.Address != null)
        {
            organization.Address = new AddressToWrite
            {
                AddressLine = readDto.Address.AddressLine,
                City = readDto.Address.City,
                State = readDto.Address.State,
                PostalCode = readDto.Address.PostalCode
            };
        }

        if (readDto?.Emails.Count > 0)
        {
            foreach (var email in readDto.Emails)
            {
                organization.Emails.Add(new EmailToWrite
                {
                    Address = email.Address,
                    IsPrimary = email.IsPrimary
                });
            }
        }

        if (readDto?.Phones.Count > 0)
        {
            foreach (var phone in readDto.Phones)
            {
                organization.Phones.Add(new PhoneToWrite
                {
                    Number = phone.Number,
                    PhoneType = Enum.Parse<PhoneType>(phone.PhoneType),
                    IsPrimary = phone.IsPrimary
                });
            }
        }
    }

    private void Add()
    {
        AddingOrganization = true;
        OrganizationsList = null;
        organization = new();
    }

    protected async Task SubmitForm()
    {
        if (AddingOrganization)
            await OrganizationDataService.AddOrganization(organization);

        if (EditingOrganization)
            await OrganizationDataService.UpdateOrganization(organization, Id);

        await CloseEditorAsync();
    }

    private async Task CloseEditorAsync()
    {
        EditingOrganization = false;
        AddingOrganization = false;
        OrganizationsList = (await OrganizationDataService.GetAllOrganizations()).ToList();
    }

    private void AddAddress()
    {
        organization.Address = new();
        EnableEditor = true;
    }

    private void SaveAddress()
    {
        EnableEditor = false;
    }

    private void CancelAddress()
    {
        //if (organizationToWrite.Address != null && AddingAddress)
        //    organizationToWrite.Address = null;
        EnableEditor = false;
    }

}
